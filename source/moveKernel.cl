/* 
   GAME MOVE

   0000 0000 0000 0000 0000 0111 1111 -> From [0x7F]
   0000 0000 0000 0011 1111 1000 0000 -> To [>> 7, 0x7F]
   0000 0000 0011 1100 0000 0000 0000 -> Captured Piece [>> 14, 0xF]
   0000 0000 0100 0000 0000 0000 0000 -> En Passent capture? [0x40000]
   0000 0000 1000 0000 0000 0000 0000 -> Pawn Start? [0x80000]
   0000 1111 0000 0000 0000 0000 0000 -> Piece promoted to[>> 20, 0xF]
   0001 0000 0000 0000 0000 0000 0000 -> Castle? [0x1000000]

*/



// Directions that each piece can move in
int constant PceDir[13][8] = {    
	                            {0, 0, 0, 0, 0, 0, 0}, // ALL
                                {0, 0, 0, 0, 0, 0, 0}, // WP
                                {-8, -19, -21, -12, 8, 19, 21, 12}, // WN
                                {-9, -11, 11, 9, 0, 0, 0, 0}, // WB
                                {-1, -10, 1, 10, 0, 0, 0, 0}, // WR
                                {-1, -10, 1, 10, -9, -11, 11, 9}, // WQ
                                {-1, -10, 1, 10, -9, -11, 11, 9}, // WK
                                {0, 0, 0, 0, 0, 0, 0}, // WP
                                {-8, -19, -21, -12, 8, 19, 21, 12}, // WN
                                {-9, -11, 11, 9, 0, 0, 0, 0}, // WB
                                {-1, -10, 1, 10, 0, 0, 0, 0}, // WR
                                {-1, -10, 1, 10, -9, -11, 11, 9}, // WQ
                                {-1, -10, 1, 10, -9, -11, 11, 9}  //WK
                            };

// How many directinons each piece has
unsigned int contant NumDir[13] = {0, 0, 8, 4, 4, 8, 8, 0, 8, 4, 4, 8, 8};



// Bittable needed for poping bits from the Bitboard
int constant BitTable[64] = {
  63, 30, 3, 32, 25, 41, 22, 33, 15, 50, 42, 13, 11, 53, 19, 34, 61, 29, 2,
  51, 21, 43, 45, 10, 18, 47, 1, 54, 9, 57, 0, 35, 62, 31, 40, 4, 49, 5, 52,
  26, 60, 6, 23, 44, 46, 27, 56, 16, 7, 39, 48, 24, 59, 14, 12, 55, 38, 28,
  58, 20, 37, 17, 36, 8
};

int constant FilesBrd[120] = {
                              100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                              100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                              100,   0,   1,   2,   3,   4,   5,   6,   7, 100,
                              100,   0,   1,   2,   3,   4,   5,   6,   7, 100,
                              100,   0,   1,   2,   3,   4,   5,   6,   7, 100,
                              100,   0,   1,   2,   3,   4,   5,   6,   7, 100,
                              100,   0,   1,   2,   3,   4,   5,   6,   7, 100,
                              100,   0,   1,   2,   3,   4,   5,   6,   7, 100,
                              100,   0,   1,   2,   3,   4,   5,   6,   7, 100,
                              100,   0,   1,   2,   3,   4,   5,   6,   7, 100,
                              100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                              100, 100, 100, 100, 100, 100, 100, 100, 100, 100
                            };

int constant RanksBrd[120] = {
                              100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                              100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                              100,   0,   0,   0,   0,   0,   0,   0,   0, 100,
                              100,   1,   1,   1,   1,   1,   1,   1,   1, 100,
                              100,   2,   2,   2,   2,   2,   2,   2,   2, 100,
                              100,   3,   3,   3,   3,   3,   3,   3,   3, 100,
                              100,   4,   4,   4,   4,   4,   4,   4,   4, 100,
                              100,   5,   5,   5,   5,   5,   5,   5,   5, 100,
                              100,   6,   6,   6,   6,   6,   6,   6,   6, 100,
                              100,   7,   7,   7,   7,   7,   7,   7,   7, 100,
                              100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                              100, 100, 100, 100, 100, 100, 100, 100, 100, 100
                            };

int constant Sq64ToSq120[64] =  {
	                             21, 22, 23, 24, 25, 26, 27, 28,
                                 31, 32, 33, 34, 35, 36, 37, 38,
                                 41, 42, 43, 44, 45, 46, 47, 48,
                                 51, 52, 53, 54, 55, 56, 57, 58,
                                 61, 62, 63, 64, 65, 66, 67, 68,
                                 71, 72, 73, 74, 75, 76, 77, 78,
                                 81, 82, 83, 84, 85, 86, 87, 88,
                                 91, 92, 93, 94, 95, 96, 97, 98
                                };


// MACROS
#define OFFBOARD 100
#define SQ120(sq64) (Sq64ToSq120[(sq64)])        // Convery 64 base board index to 120
#define SQOFFBOARD(sq) (FilesBrd[(sq)] == OFFBOARD)
#define MOVE(f, t, ca, pro, fl) ((f) | ((t) << 7) | ((ca) << 14) | ((pro) << 20) | (fl))

// Helper functions
inline int countBits(unsigned long* bb) {
  int r;
  for(r = 0; bb; r++, bb &= bb - 1);
  return r;
}


inline int popBit(unsigned long* bb)
{
    unsigned long b = *bb ^ (*bb - 1);
    unsigned int fold = (unsigned int) ((b & 0xffffffff) ^ (b >> 32));
    *bb &= (*bb - 1);
    return BitTable[(fold * 0x783a9b23) >> 26];
}

// Kernel
// Workgroup - Piece Type
// WorkItem - Individual Piece
__kernel void moveKernel(
                         __global unsigned long* bitboards,
                         __global unsigned long* moves, // Return Value
                        )
{

  



}